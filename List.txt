     1                                  ;IFilter.asm  by Robert Rayment  18/12/01
     2                                  
     3                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                                  ; VB
     5                                  ;' MCode Structure
     6                                  ;Public Type MCodeStruc
     7                                  ;   PICW As Long
     8                                  ;   PICH As Long
     9                                  ;   zmf1 As Single
    10                                  ;   zmf2 As Single
    11                                  ;   zdf As Single
    12                                  ;   zf As Single
    13                                  ;   ckQB As Long
    14                                  ;   ckABS As Long
    15                                  ;   QBLongColor As Long
    16                                  ;   PtrMat As Long
    17                                  ;   PtrPalBGR As Long
    18                                  ;End Type
    19                                  ;Public MC As MCodeStruc
    20                                  ;'-------------------------------------------------------
    21                                  ;
    22                                  ; res = CallWindowProc(ptMC, ptrStruc, 0&, 0&, 0&)
    23                                  ;
    24                                  ;' Determine PIC limits
    25                                  ;PicXLo = 2: PicXHi = PICW - 1
    26                                  ;PicYLo = 2: PicYHi = PICH - 1
    27                                  ;limx = 1
    28                                  ;limy = 1
    29                                  ;
    30                                  ;For ix = 1 To 5
    31                                  ;   If Mat(ix, 1) <> 0 Or Mat(ix, 5) <> 0 Then
    32                                  ;      PicXLo = 3: PicXHi = PICW - 2
    33                                  ;      limx = 2
    34                                  ;      Exit For
    35                                  ;   End If
    36                                  ;Next ix
    37                                  ;
    38                                  ;For iy = 1 To 5
    39                                  ;   If Mat(1, iy) <> 0 Or Mat(5, iy) <> 0 Then
    40                                  ;      PicYLo = 3: PicYHi = PICH - 2
    41                                  ;      limy = 2
    42                                  ;      Exit For
    43                                  ;   End If
    44                                  ;Next iy
    45                                  ;
    46                                  ;
    47                                  ;For iy = PicYLo To PicYHi 'Step 1 + 3 * Rnd
    48                                  ;For ix = PicXLo To PicXHi 'Step 1 + 3 * Rnd
    49                                  ;         
    50                                  ;   culB = 0
    51                                  ;   culG = 0
    52                                  ;   culR = 0
    53                                  ;   
    54                                  ;   For iyy = -limy To limy
    55                                  ;   miy = iyy + 3
    56                                  ;   For ixx = -limx To limx
    57                                  ;      
    58                                  ;      If ixx <> 0 Or iyy <> 0 Then
    59                                  ;         mix = ixx + 3
    60                                  ;         culB = culB + Mat(mix, miy) * PalBGR(1, ix + ixx, iy + iyy, 3)
    61                                  ;         culG = culG + Mat(mix, miy) * PalBGR(2, ix + ixx, iy + iyy, 3)
    62                                  ;         culR = culR + Mat(mix, miy) * PalBGR(3, ix + ixx, iy + iyy, 3)
    63                                  ;      End If
    64                                  ;      
    65                                  ;   Next ixx
    66                                  ;   Next iyy
    67                                  ;      
    68                                  ;   culB = (zmf1 * culB + zmf2 * Mat(3, 3) * PalBGR(1, ix, iy, 3)) / zdf
    69                                  ;   culG = (zmf1 * culG + zmf2 * Mat(3, 3) * PalBGR(2, ix, iy, 3)) / zdf
    70                                  ;   culR = (zmf1 * culR + zmf2 * Mat(3, 3) * PalBGR(3, ix, iy, 3)) / zdf
    71                                  ;      
    72                                  ;   If Form1.chkQB.Value = Checked Then
    73                                  ;      culB = culB + QBBlue
    74                                  ;      culG = culG + QBGreen
    75                                  ;      culR = culR + QBRed
    76                                  ;   Else
    77                                  ;      culB = culB + zf
    78                                  ;      culG = culG + zf
    79                                  ;      culR = culR + zf
    80                                  ;   End If
    81                                  ;      
    82                                  ;   If Form1.chkAbs.Value = Checked Then
    83                                  ;      culB = Abs(culB)
    84                                  ;      culG = Abs(culG)
    85                                  ;      culR = Abs(culR)
    86                                  ;   End If
    87                                  ;      
    88                                  ;   If culB > 255 Then culB = 255
    89                                  ;   If culG > 255 Then culG = 255
    90                                  ;   If culR > 255 Then culR = 255
    91                                  ;      
    92                                  ;   If culB < 0 Then culB = 0
    93                                  ;   If culG < 0 Then culG = 0
    94                                  ;   If culR < 0 Then culR = 0
    95                                  ;      
    96                                  ;   PalBGR(1, ix, iy, 2) = culB
    97                                  ;   PalBGR(2, ix, iy, 2) = culG
    98                                  ;   PalBGR(3, ix, iy, 2) = culR
    99                                  ;      
   100                                  ;Next ix
   101                                  ;Next iy
   102                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   103                                  
   104                                  %macro movab 2		; name & num of parameters
   105                                    push dword %2		; 2nd param
   106                                    pop dword %1		; 1st param
   107                                  %endmacro			; use  movab %1,%2
   108                                  ; Allows eg	movab bmW,[ebx+4]
   109                                  
   110                                  %define PICW            [ebp-4]
   111                                  %define PICH            [ebp-8]
   112                                  %define zmf1            [ebp-12]
   113                                  %define zmf2            [ebp-16]
   114                                  %define zdf             [ebp-20]
   115                                  %define zf              [ebp-24]
   116                                  %define ckQB            [ebp-28]
   117                                  %define ckABS           [ebp-32]
   118                                  %define QBLongColor		[ebp-36]
   119                                  %define PtrMat          [ebp-40]
   120                                  %define PtrPalBGR		[ebp-44]
   121                                  
   122                                  %define PicYLo		[ebp-48]
   123                                  %define PicYHi		[ebp-52]
   124                                  %define PicXLo		[ebp-56]
   125                                  %define PicXHi		[ebp-60]
   126                                  %define mlimy		[ebp-64]	; -limy
   127                                  %define limy		[ebp-68]
   128                                  %define mlimx		[ebp-72]	; -limx
   129                                  %define limx		[ebp-76]
   130                                  %define miy			[ebp-80]
   131                                  %define mix			[ebp-84]
   132                                  
   133                                  
   134                                  %define iy		[ebp-88]   ; PicYLo To PicYHi
   135                                  %define ix		[ebp-92]   ; PicXLo To PicXHi
   136                                  %define iyy		[ebp-96]   ; -limy ti limy 
   137                                  %define ixx		[ebp-100]  ; -limx to limx
   138                                  
   139                                  %define culB	[ebp-104]
   140                                  %define culG	[ebp-108]
   141                                  %define culR	[ebp-112]
   142                                  %define culA	[ebp-116]
   143                                  
   144                                  %define PalSize    [ebp-120]
   145                                  %define LineBytes  [ebp-124]
   146                                  
   147                                  %define QBculB	[ebp-128]
   148                                  %define QBculG	[ebp-132]
   149                                  %define QBculR	[ebp-136]
   150                                  %define QBculA	[ebp-140]
   151                                  
   152                                  %define MatVal	[ebp-144]
   153                                  %define Temp	[ebp-148]
   154                                  %define ptBGR2	[ebp-152]
   155                                  %define ptBGR3	[ebp-156]
   156                                  
   157                                  [bits 32]
   158                                  
   159 00000000 55                      	push ebp
   160 00000001 89E5                    	mov ebp,esp
   161 00000003 81EC9C000000            	sub esp,156
   162 00000009 57                      	push edi
   163 0000000A 56                      	push esi
   164 0000000B 53                      	push ebx
   165                                  
   166                                  	; Copy structure
   167 0000000C 8B5D08                  	mov ebx,[ebp+8]
   168                                  	
   169                                  	movab PICW,          [ebx]
   170 0000000F FF33                <1>   push dword %2
   171 00000011 8F45FC              <1>   pop dword %1
   172                                  	movab PICH,          [ebx+4]
   173 00000014 FF7304              <1>   push dword %2
   174 00000017 8F45F8              <1>   pop dword %1
   175                                  	movab zmf1,          [ebx+8]
   176 0000001A FF7308              <1>   push dword %2
   177 0000001D 8F45F4              <1>   pop dword %1
   178                                  	movab zmf2,          [ebx+12]
   179 00000020 FF730C              <1>   push dword %2
   180 00000023 8F45F0              <1>   pop dword %1
   181                                  	movab zdf,           [ebx+16]
   182 00000026 FF7310              <1>   push dword %2
   183 00000029 8F45EC              <1>   pop dword %1
   184                                  	movab zf,            [ebx+20]
   185 0000002C FF7314              <1>   push dword %2
   186 0000002F 8F45E8              <1>   pop dword %1
   187                                  	movab ckQB,          [ebx+24]
   188 00000032 FF7318              <1>   push dword %2
   189 00000035 8F45E4              <1>   pop dword %1
   190                                  	movab ckABS,         [ebx+28]
   191 00000038 FF731C              <1>   push dword %2
   192 0000003B 8F45E0              <1>   pop dword %1
   193                                  	movab QBLongColor,   [ebx+32]
   194 0000003E FF7320              <1>   push dword %2
   195 00000041 8F45DC              <1>   pop dword %1
   196                                  	movab PtrMat,        [ebx+36]
   197 00000044 FF7324              <1>   push dword %2
   198 00000047 8F45D8              <1>   pop dword %1
   199                                  	movab PtrPalBGR,     [ebx+40]
   200 0000004A FF7328              <1>   push dword %2
   201 0000004D 8F45D4              <1>   pop dword %1
   202                                  
   203 00000050 8B45F8                  	mov eax,PICH
   204 00000053 8B5DFC                  	mov ebx,PICW
   205 00000056 F7E3                    	mul ebx
   206 00000058 894588                  	mov PalSize,eax		; In 4 byte chunks
   207                                  
   208 0000005B 8B75D4                  	mov esi,PtrPalBGR   ; esi = pts to PalBGR(1,1,1,1)
   209 0000005E 56                      	push esi
   210 0000005F 5F                      	pop edi
   211 00000060 8B4588                  	mov eax,PalSize
   212 00000063 C1E002                  	shl eax,2			; x4
   213 00000066 01C7                    	add edi,eax			; edi pts to PalBGR(1,1,1,2) Blue
   214                                  
   215                                  
   216                                  ;' Determine PIC limits
   217                                  ;PicXLo = 2: PicXHi = PICW - 1
   218                                  ;PicYLo = 2: PicYHi = PICH - 1
   219                                  ;limx = 1
   220                                  ;limy = 1
   221                                  	
   222 00000068 B802000000              	mov eax,2
   223 0000006D 8945C8                  	mov PicXLo,eax
   224 00000070 8945D0                  	mov PicYLo,eax
   225 00000073 48                      	dec eax
   226 00000074 8945B4                  	mov limx,eax
   227 00000077 8945BC                  	mov limy,eax
   228 0000007A 8B45FC                  	mov eax,PICW
   229 0000007D 48                      	dec eax
   230 0000007E 8945C4                  	mov PicXHi,eax
   231 00000081 8B45F8                  	mov eax,PICH
   232 00000084 48                      	dec eax
   233 00000085 8945CC                  	mov PicYHi,eax
   234                                  	
   235                                  ;For ix = 1 To 5
   236                                  ;   If Mat(ix, 1) <> 0 Or Mat(ix, 5) <> 0 Then
   237                                  ;      PicXLo = 3: PicXHi = PICW - 2
   238                                  ;      limx = 2
   239                                  ;      Exit For
   240                                  ;   End If
   241                                  ;Next ix
   242                                  
   243 00000088 B905000000              	mov ecx,5
   244                                  nix:
   245 0000008D 8B75D8                  	mov esi,PtrMat		; Mat(1,1)
   246 00000090 89C8                    	mov eax,ecx
   247 00000092 48                      	dec eax
   248 00000093 C1E002                  	shl eax,2			; 4*(ix-1)
   249 00000096 01C6                    	add esi,eax			; Mat(ix,1)
   250 00000098 8B06                    	mov eax,[esi]
   251 0000009A 3D00000000              	cmp eax,0
   252 0000009F 7518                    	jne ReSizeXLims
   253 000000A1 B850000000              	mov eax,80			; ie 20*4
   254 000000A6 01C6                    	add esi,eax			; Mat(ix,5)
   255 000000A8 8B06                    	mov eax,[esi]
   256 000000AA 3D00000000              	cmp eax,0
   257 000000AF 7508                    	jne ReSizeXLims
   258 000000B1 49                      	dec ecx
   259 000000B2 75D9                    	jnz nix
   260 000000B4 E915000000              	jmp TestYLims
   261                                  ReSizeXLims:
   262                                  ;      PicXLo = 3: PicXHi = PICW - 2
   263                                  ;      limx = 2
   264                                  	
   265 000000B9 8B45C8                  	mov eax,PicXLo
   266 000000BC 40                      	inc eax
   267 000000BD 8945C8                  	mov PicXLo,eax
   268 000000C0 8B45C4                  	mov eax,PicXHi
   269 000000C3 48                      	dec eax
   270 000000C4 8945C4                  	mov PicXHi,eax
   271 000000C7 8B45B4                  	mov eax,limx
   272 000000CA 40                      	inc eax
   273 000000CB 8945B4                  	mov limx,eax
   274                                  TestYLims:
   275                                  ;For iy = 1 To 5
   276                                  ;   If Mat(1, iy) <> 0 Or Mat(5, iy) <> 0 Then
   277                                  ;      PicYLo = 3: PicYHi = PICH - 2
   278                                  ;      limy = 2
   279                                  ;      Exit For
   280                                  ;   End If
   281                                  ;Next iy
   282                                  
   283 000000CE B905000000              	mov ecx,5
   284                                  niy:
   285 000000D3 8B75D8                  	mov esi,PtrMat		; Mat(1,1)
   286 000000D6 89C8                    	mov eax,ecx
   287 000000D8 48                      	dec eax
   288 000000D9 BB14000000              	mov ebx,20
   289 000000DE F7E3                    	mul ebx
   290 000000E0 01C6                    	add esi,eax			; Mat(1,iy)
   291 000000E2 8B06                    	mov eax,[esi]
   292 000000E4 3D00000000              	cmp eax,0
   293 000000E9 7518                    	jne ReSizeYLims
   294 000000EB B810000000              	mov eax,16			; ie 4*4
   295 000000F0 01C6                    	add esi,eax			; Mat(5,iy)
   296 000000F2 8B06                    	mov eax,[esi]
   297 000000F4 3D00000000              	cmp eax,0
   298 000000F9 7508                    	jne ReSizeYLims
   299 000000FB 49                      	dec ecx
   300 000000FC 75D5                    	jnz niy
   301 000000FE E915000000              	jmp Setlimxy
   302                                  ReSizeYLims:
   303                                  ;      PicYLo = 3: PicYHi = PICH - 2
   304                                  ;      limy = 2
   305                                  	
   306 00000103 8B45D0                  	mov eax,PicYLo
   307 00000106 40                      	inc eax
   308 00000107 8945D0                  	mov PicYLo,eax
   309 0000010A 8B45CC                  	mov eax,PicYHi
   310 0000010D 48                      	dec eax
   311 0000010E 8945CC                  	mov PicYHi,eax
   312 00000111 8B45BC                  	mov eax,limy
   313 00000114 40                      	inc eax
   314 00000115 8945BC                  	mov limy,eax
   315                                  Setlimxy:
   316 00000118 8B45B4                  	mov eax,limx
   317 0000011B F7D8                    	neg eax
   318 0000011D 8945B8                  	mov mlimx,eax
   319 00000120 8B45BC                  	mov eax,limy
   320 00000123 F7D8                    	neg eax
   321 00000125 8945C0                  	mov mlimy,eax
   322                                  	
   323                                  	; Get QBRGB	
   324 00000128 8B45DC                  	mov eax,QBLongColor
   325 0000012B 25FF000000              	and eax,0FFh
   326 00000130 898578FFFFFF            	mov QBculR,eax
   327 00000136 8B45DC                  	mov eax,QBLongColor
   328 00000139 2500FF0000              	and eax,0FF00h
   329 0000013E C1E808                  	shr eax,8
   330 00000141 89857CFFFFFF            	mov QBculG,eax
   331 00000147 8B45DC                  	mov eax,QBLongColor
   332 0000014A 250000FF00              	and eax,0FF0000h
   333 0000014F C1E810                  	shr eax,16
   334 00000152 894580                  	mov QBculB,eax
   335                                  
   336                                  ;---------------------------------------------------  
   337 00000155 8B7DD4                  	mov edi,PtrPalBGR
   338 00000158 8B4588                  	mov eax,PalSize
   339 0000015B C1E002                  	shl eax,2			; x4
   340 0000015E 01C7                    	add edi,eax			; edi pts to PalBGR(1,1,1,2) Blue
   341 00000160 89BD68FFFFFF            	mov ptBGR2,edi
   342 00000166 01C7                    	add edi,eax			; edi pts to PalBGR(1,1,1,3) Blue
   343 00000168 89BD64FFFFFF            	mov ptBGR3,edi
   344                                  
   345                                  ;For iy = PicYLo To PicYHi 'Step 1 + 3 * Rnd
   346                                  ;For ix = PicXLo To PicXHi 'Step 1 + 3 * Rnd
   347                                  ;         
   348                                  ;   culB = 0
   349                                  ;   culG = 0
   350                                  ;   culR = 0
   351                                  ;   
   352                                  
   353 0000016E 8B4DD0                  	mov ecx,PicYLo
   354                                  FORiy:
   355 00000171 894DA8                  	mov iy,ecx
   356 00000174 51                      	push ecx
   357                                  	
   358 00000175 8B4DC8                  	mov ecx,PicXLo
   359                                  FORix:
   360 00000178 894DA4                  	mov ix,ecx
   361 0000017B 51                      	push ecx
   362                                  	;-----------------------------------------
   363                                  
   364 0000017C 31C0                    	xor eax,eax
   365 0000017E 894598                  	mov culB,eax
   366 00000181 894594                  	mov culG,eax
   367 00000184 894590                  	mov culR,eax
   368                                  	
   369                                  	;   For iyy = -limy To limy
   370                                  	;   miy = iyy + 3
   371                                  	;   For ixx = -limx To limx
   372                                  	
   373 00000187 8B4DC0                  	mov ecx,mlimy
   374                                  FORiyy:
   375 0000018A 894DA0                  	mov iyy,ecx
   376 0000018D 51                      	push ecx
   377                                  	
   378 0000018E 89C8                    	mov eax,ecx
   379 00000190 0503000000              	add eax,3
   380 00000195 8945B0                  	mov miy,eax
   381                                  	
   382 00000198 8B4DB8                  	mov ecx,mlimx
   383                                  FORixx:
   384 0000019B 894D9C                  	mov ixx,ecx
   385 0000019E 51                      	push ecx
   386                                  	
   387                                  	;      If ixx <> 0 Or iyy <> 0 Then
   388                                  	;         mix = ixx + 3
   389                                  	;         culB = culB + Mat(mix, miy) * PalBGR(1, ix + ixx, iy + iyy, 3)
   390                                  	;         culG = culG + Mat(mix, miy) * PalBGR(2, ix + ixx, iy + iyy, 3)
   391                                  	;         culR = culR + Mat(mix, miy) * PalBGR(3, ix + ixx, iy + iyy, 3)
   392                                  	;      End If
   393                                  	
   394 0000019F 8B459C                  	mov eax,ixx
   395 000001A2 3D00000000              	cmp eax,0
   396 000001A7 750E                    	jne AppFill
   397 000001A9 8B45A0                  	mov eax,iyy
   398 000001AC 3D00000000              	cmp eax,0
   399 000001B1 0F8460000000            	je near NEXixx
   400                                  AppFill:
   401 000001B7 8B459C                  	mov eax,ixx
   402 000001BA 0503000000              	add eax,3
   403 000001BF 8945AC                  	mov mix,eax
   404                                  	
   405 000001C2 8BBD64FFFFFF            	mov edi,ptBGR3
   406 000001C8 8B75D8                  	mov esi,PtrMat		; esi pts to Mat(1,1)
   407                                  	
   408                                  	; Get Mat(mix,miy) value
   409 000001CB 8B45B0                  	mov eax,miy
   410 000001CE 48                      	dec eax
   411 000001CF BB14000000              	mov ebx,20
   412 000001D4 F7E3                    	mul ebx
   413 000001D6 01C6                    	add esi,eax
   414 000001D8 8B45AC                  	mov eax,mix
   415 000001DB 48                      	dec eax
   416 000001DC C1E002                  	shl eax,2
   417 000001DF 01C6                    	add esi,eax
   418 000001E1 8B06                    	mov eax,[esi]
   419 000001E3 898570FFFFFF            	mov MatVal,eax
   420                                  	
   421                                  	;         culB = culB + Mat(mix, miy) * PalBGR(1, ix + ixx, iy + iyy, 3)
   422                                  	;         culG = culG + Mat(mix, miy) * PalBGR(2, ix + ixx, iy + iyy, 3)
   423                                  	;         culR = culR + Mat(mix, miy) * PalBGR(3, ix + ixx, iy + iyy, 3)
   424                                  	
   425 000001E9 8BBD64FFFFFF            	mov edi,ptBGR3
   426 000001EF E8F4010000              	Call near GetAddrEDIixxxiyyy	; edi->PalBGR(1, ix + ixx, iy + iyy, 3)
   427                                  
   428 000001F4 8B9D70FFFFFF            	mov ebx,MatVal
   429                                  
   430 000001FA 31C0                    	xor eax,eax
   431 000001FC 8A07                    	mov AL,[edi]
   432 000001FE F7E3                    	mul ebx
   433 00000200 014598                  	add culB,eax
   434 00000203 31C0                    	xor eax,eax
   435 00000205 8A4701                  	mov AL,[edi+1]
   436 00000208 F7E3                    	mul ebx
   437 0000020A 014594                  	add culG,eax
   438 0000020D 31C0                    	xor eax,eax
   439 0000020F 8A4702                  	mov AL,[edi+2]
   440 00000212 F7E3                    	mul ebx
   441 00000214 014590                  	add culR,eax
   442                                  
   443                                  NEXixx:
   444 00000217 59                      	pop ecx
   445 00000218 41                      	inc ecx
   446 00000219 3B4DB4                  	cmp ecx,limx
   447 0000021C 0F8E79FFFFFF            	jle near FORixx
   448                                  NEXiyy:
   449 00000222 59                      	pop ecx
   450 00000223 41                      	inc ecx
   451 00000224 3B4DBC                  	cmp ecx,limy
   452 00000227 0F8E5DFFFFFF            	jle near FORiyy
   453                                  	
   454                                  	;   culB = (zmf1 * culB + zmf2 * Mat(3, 3) * PalBGR(1, ix, iy, 3)) / zdf
   455                                  	;   culG = (zmf1 * culG + zmf2 * Mat(3, 3) * PalBGR(2, ix, iy, 3)) / zdf
   456                                  	;   culR = (zmf1 * culR + zmf2 * Mat(3, 3) * PalBGR(3, ix, iy, 3)) / zdf
   457                                  	
   458 0000022D 8B75D8                  	mov esi,PtrMat		; esi pts to Mat(1,1)
   459                                  
   460                                  	; Get Mat(3,3) value
   461 00000230 B828000000              	mov eax,40
   462 00000235 01C6                    	add esi,eax
   463 00000237 B808000000              	mov eax,8
   464 0000023C 01C6                    	add esi,eax
   465 0000023E 8B06                    	mov eax,[esi]
   466 00000240 898570FFFFFF            	mov MatVal,eax
   467                                  	
   468 00000246 8BBD64FFFFFF            	mov edi,ptBGR3
   469 0000024C E8B8010000              	Call near GetAddrEDIixiy
   470                                  	
   471 00000251 8B9D70FFFFFF            	mov ebx,MatVal
   472                                  
   473 00000257 31C0                    	xor eax,eax
   474 00000259 8A07                    	mov AL,[edi]		; Blue
   475 0000025B F7E3                    	mul ebx
   476 0000025D 89856CFFFFFF            	mov Temp,eax
   477 00000263 DB856CFFFFFF            	fild dword Temp
   478 00000269 D945F0                  	fld dword zmf2
   479 0000026C DEC9                    	fmulp st1			; zmf2 * Temp
   480 0000026E DB4598                  	fild dword culB
   481 00000271 D945F4                  	fld dword zmf1
   482 00000274 DEC9                    	fmulp st1			; zmf1 * culB
   483 00000276 DEC1                    	faddp st1
   484 00000278 D945EC                  	fld dword zdf
   485 0000027B DEF9                    	fdivp st1			; ( zmf1 * culB + zmf2 * Temp ) / zdf
   486 0000027D DB5D98                  	fistp dword culB
   487                                  	
   488 00000280 31C0                    	xor eax,eax
   489 00000282 8A4701                  	mov AL,[edi+1]		; Green
   490 00000285 F7E3                    	mul ebx
   491 00000287 89856CFFFFFF            	mov Temp,eax
   492 0000028D DB856CFFFFFF            	fild dword Temp
   493 00000293 D945F0                  	fld dword zmf2
   494 00000296 DEC9                    	fmulp st1			; zmf2 * Temp
   495 00000298 DB4594                  	fild dword culG
   496 0000029B D945F4                  	fld dword zmf1
   497 0000029E DEC9                    	fmulp st1			; zmf1 * culG
   498 000002A0 DEC1                    	faddp st1
   499 000002A2 D945EC                  	fld dword zdf
   500 000002A5 DEF9                    	fdivp st1			; ( zmf1 * culG + zmf2 * Temp ) / zdf
   501 000002A7 DB5D94                  	fistp dword culG
   502                                  	
   503 000002AA 31C0                    	xor eax,eax
   504 000002AC 8A4702                  	mov AL,[edi+2]		; Red
   505 000002AF F7E3                    	mul ebx
   506 000002B1 89856CFFFFFF            	mov Temp,eax
   507 000002B7 DB856CFFFFFF            	fild dword Temp
   508 000002BD D945F0                  	fld dword zmf2
   509 000002C0 DEC9                    	fmulp st1			; zmf2 * Temp
   510 000002C2 DB4590                  	fild dword culR
   511 000002C5 D945F4                  	fld dword zmf1
   512 000002C8 DEC9                    	fmulp st1			; zmf1 * culR
   513 000002CA DEC1                    	faddp st1
   514 000002CC D945EC                  	fld dword zdf
   515 000002CF DEF9                    	fdivp st1			; ( zmf1 * culR + zmf2 * Temp ) / zdf
   516 000002D1 DB5D90                  	fistp dword culR
   517                                  
   518                                  
   519                                  
   520                                  	;   If Form1.chkQB.Value = Checked Then
   521                                  	;      culB = culB + QBBlue
   522                                  	;      culG = culG + QBGreen
   523                                  	;      culR = culR + QBRed
   524                                  	;   Else
   525                                  	;      culB = culB + zf
   526                                  	;      culG = culG + zf
   527                                  	;      culR = culR + zf
   528                                  	;   End If
   529                                  
   530 000002D4 8B45E4                  	mov eax,ckQB
   531 000002D7 3D00000000              	cmp eax,0
   532 000002DC 7426                    	je Addzf
   533                                  	
   534 000002DE 8B4598                  	mov eax,culB
   535 000002E1 034580                  	add eax,QBculB
   536 000002E4 894598                  	mov culB,eax
   537 000002E7 8B4594                  	mov eax,culG
   538 000002EA 03857CFFFFFF            	add eax,QBculG
   539 000002F0 894594                  	mov culG,eax
   540 000002F3 8B4590                  	mov eax,culR
   541 000002F6 038578FFFFFF            	add eax,QBculR
   542 000002FC 894590                  	mov culR,eax
   543 000002FF E921000000              	jmp CheckABS 
   544                                  
   545                                  	;      culB = culB + zf
   546                                  	;      culG = culG + zf
   547                                  	;      culR = culR + zf
   548                                  
   549                                  Addzf:
   550 00000304 DB4598                  	fild dword culB
   551 00000307 D945E8                  	fld dword zf
   552 0000030A DEC1                    	faddp st1
   553 0000030C DB5D98                  	fistp dword culB
   554                                  	
   555 0000030F DB4594                  	fild dword culG
   556 00000312 D945E8                  	fld dword zf
   557 00000315 DEC1                    	faddp st1
   558 00000317 DB5D94                  	fistp dword culG
   559                                  
   560 0000031A DB4590                  	fild dword culR
   561 0000031D D945E8                  	fld dword zf
   562 00000320 DEC1                    	faddp st1
   563 00000322 DB5D90                  	fistp dword culR
   564                                  
   565                                  ;   If Form1.chkAbs.Value = Checked Then
   566                                  ;      culB = Abs(culB)
   567                                  ;      culG = Abs(culG)
   568                                  ;      culR = Abs(culR)
   569                                  ;   End If
   570                                  
   571                                  CheckABS:
   572 00000325 8B45E0                  	mov eax,ckABS
   573 00000328 3D00000000              	cmp eax,0
   574 0000032D 741E                    	je CheckRange
   575                                  	
   576 0000032F 8B4598                  	mov eax,culB
   577 00000332 F7D8                    L1:	neg eax
   578 00000334 78FC                    	js L1
   579 00000336 894598                  	mov culB,eax	; ABS(culB)
   580                                  	
   581 00000339 8B4594                  	mov eax,culG
   582 0000033C F7D8                    L2:	neg eax
   583 0000033E 78FC                    	js L2
   584 00000340 894594                  	mov culG,eax	; ABS(culG)
   585                                  
   586 00000343 8B4590                  	mov eax,culR
   587 00000346 F7D8                    L3:	neg eax
   588 00000348 78FC                    	js L3
   589 0000034A 894590                  	mov culR,eax	; ABS(culR)
   590                                  
   591                                  
   592                                  	;   If culB > 255 Then culB = 255
   593                                  	;   If culG > 255 Then culG = 255
   594                                  	;   If culR > 255 Then culR = 255
   595                                  	;      
   596                                  	;   If culB < 0 Then culB = 0
   597                                  	;   If culG < 0 Then culG = 0
   598                                  	;   If culR < 0 Then culR = 0
   599                                  
   600                                  CheckRange:
   601 0000034D 8B4598                  	mov eax,culB
   602 00000350 3DFF000000              	cmp eax,255
   603 00000355 7C0A                    	jl B255
   604 00000357 B8FF000000              	mov eax,255
   605 0000035C E909000000              	jmp STOculB
   606                                  B255:
   607 00000361 3D00000000              	cmp eax,0
   608 00000366 7D02                    	jge STOculB
   609 00000368 31C0                    	xor eax,eax
   610                                  STOculB:
   611 0000036A 894598                  	mov culB,eax
   612                                  
   613 0000036D 8B4594                  	mov eax,culG
   614 00000370 3DFF000000              	cmp eax,255
   615 00000375 7C0A                    	jl G255
   616 00000377 B8FF000000              	mov eax,255
   617 0000037C E909000000              	jmp STOculG
   618                                  G255:
   619 00000381 3D00000000              	cmp eax,0
   620 00000386 7D02                    	jge STOculG
   621 00000388 31C0                    	xor eax,eax
   622                                  STOculG:
   623 0000038A 894594                  	mov culG,eax
   624                                  
   625 0000038D 8B4590                  	mov eax,culR
   626 00000390 3DFF000000              	cmp eax,255
   627 00000395 7C0A                    	jl R255
   628 00000397 B8FF000000              	mov eax,255
   629 0000039C E909000000              	jmp STOculR
   630                                  R255:
   631 000003A1 3D00000000              	cmp eax,0
   632 000003A6 7D02                    	jge STOculR
   633 000003A8 31C0                    	xor eax,eax
   634                                  STOculR:
   635 000003AA 894590                  	mov culR,eax
   636                                  
   637                                  ;   PalBGR(1, ix, iy, 2) = culB
   638                                  ;   PalBGR(2, ix, iy, 2) = culG
   639                                  ;   PalBGR(3, ix, iy, 2) = culR
   640                                  
   641                                  	;-----------------------------------------
   642                                  
   643 000003AD 8BBD68FFFFFF            	mov edi,ptBGR2
   644 000003B3 E851000000              	Call near GetAddrEDIixiy
   645                                  	
   646 000003B8 8B4598                  	mov eax,culB
   647 000003BB 8807                    	mov [edi],AL
   648 000003BD 8B4594                  	mov eax,culG
   649 000003C0 884701                  	mov [edi+1],AL
   650 000003C3 8B4590                  	mov eax,culR
   651 000003C6 884702                  	mov [edi+2],AL
   652                                  
   653                                  NEXix:
   654 000003C9 59                      	pop ecx
   655 000003CA 41                      	inc ecx
   656 000003CB 3B4DC4                  	cmp ecx,PicXHi
   657 000003CE 0F8EA4FDFFFF            	jle near FORix
   658                                  NEXiy:
   659 000003D4 59                      	pop ecx
   660 000003D5 41                      	inc ecx
   661 000003D6 3B4DCC                  	cmp ecx,PicYHi
   662 000003D9 0F8E92FDFFFF            	jle near FORiy
   663                                  
   664                                  GETOUT:
   665 000003DF 5B                      	pop ebx
   666 000003E0 5E                      	pop esi
   667 000003E1 5F                      	pop edi
   668 000003E2 89EC                    	mov esp,ebp
   669 000003E4 5D                      	pop ebp
   670 000003E5 C21000                  	ret 16
   671                                  
   672                                  ;============================================================
   673                                  
   674                                  GetAddrEDIixxxiyyy: ; In edi, ix + ixx, iy + iyy  Out: new edi->B
   675                                                  ; Uses eax,ebx
   676                                  	;B = edi + 4 * [(iy + iyy - 1) * PICW + (ix + ixx - 1))]
   677 000003E8 8B45A8                  	mov eax,iy
   678 000003EB 8B5DA0                  	mov ebx,iyy
   679 000003EE 01D8                    	add eax,ebx
   680 000003F0 48                      	dec eax
   681 000003F1 8B5DFC                  	mov ebx,PICW
   682 000003F4 F7E3                    	mul ebx
   683 000003F6 50                      	push eax
   684                                  	
   685 000003F7 8B45A4                  	mov eax,ix
   686 000003FA 8B5D9C                  	mov ebx,ixx
   687 000003FD 01D8                    	add eax,ebx
   688 000003FF 48                      	dec eax
   689                                  
   690 00000400 5B                      	pop ebx
   691 00000401 01D8                    	add eax,ebx
   692 00000403 C1E002                  	shl eax,2		; x4
   693 00000406 01C7                    	add edi,eax
   694 00000408 C3                      RET
   695                                  ;============================================================
   696                                  GetAddrEDIixiy: ; In edi, ix, iy  Out: new edi->B
   697                                                  ; Uses eax,ebx
   698                                  	;B = edi + 4 * [(iy - 1) * PICW + (ix - 1))]
   699 00000409 8B45A8                  	mov eax,iy
   700 0000040C 48                      	dec eax
   701 0000040D 8B5DFC                  	mov ebx,PICW
   702 00000410 F7E3                    	mul ebx
   703 00000412 50                      	push eax
   704                                  	
   705 00000413 8B45A4                  	mov eax,ix
   706 00000416 48                      	dec eax
   707                                  
   708 00000417 5B                      	pop ebx
   709 00000418 01D8                    	add eax,ebx
   710 0000041A C1E002                  	shl eax,2		; x4
   711 0000041D 01C7                    	add edi,eax
   712 0000041F C3                      RET
   713                                  ;============================================================
   714                                  
   715                                  ;############################################################
